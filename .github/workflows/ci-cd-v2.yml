name: ci-cd-v2

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tags:
        description: 'Test scenario tags'

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - name: Setup
        run: echo "start build"
      - name: Send discord message
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: info
          text: 'start build'

  build-modeling-api:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: modeling-api build and push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./data-modeling-api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi:latest
      - name: Send discord message if fail
        if: ${{ failure() }}
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: error
          text: 'modeling-api package failed to build'
      - name: Send discord message if success
        if: ${{ success() }}
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: info
          text: 'modeling-api was successfully built'
    
  build-web:
    runs-on: ubuntu-latest
    needs: setup
    env:
      WORKDIR: web
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx for cache
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setting .env
        run: |
          echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> .env
        working-directory: ${{ env.WORKDIR }}
      - name: Web build and push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./web
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/web:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Send discord message if fail
        if: ${{ failure() }}
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: error
          text: 'web package failed to build'
      - name: Send discord message if success
        if: ${{ success() }}
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: info
          text: 'web package was successfully built'

  build-api:
    runs-on: ubuntu-latest
    needs: setup
    env:
      WORKDIR: api
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Docker Buildx for cache
        uses: docker/setup-buildx-action@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.5.0'
      - name: Install dependencies
        run: npm ci
        working-directory: ${{ env.WORKDIR }}
      - name: Setting .env
        run: |
          echo "SERVICE_KEY=${{ secrets.KRX_SERVICE_KEY }}" >> .env
          echo "SUPABASE_URL=${{ secrets.SUPABASE_URL }}" >> .env
          echo "SUPABASE_BUCKET_NAME=${{ secrets.SUPABASE_BUCKET_NAME }}" >> .env
          echo "SUPABASE_KEY=${{ secrets.SUPABASE_KEY }}" >> .env
          echo "TWELVE_KEY=${{ secrets.TWELVE_KEY }}" >> .env
        working-directory: ${{ env.WORKDIR }}
      - name: Run tests
        run: npm test
        working-directory: ${{ env.WORKDIR }}
      - name: API build and push
        uses: docker/build-push-action@v5.1.0
        with:
          context: ./api
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/api:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Send discord message if fail
        if: ${{ failure() }}
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: error
          text: 'api package failed to build'
      - name: Send discord message if success
        if: ${{ success() }}
        uses: rjstone/discord-webhook-notify@v1.0.4
        with:
          webhookUrl: ${{ secrets.DISCORD_WEBHOOK_URL }}
          severity: info
          text: 'api package was successfully built'

