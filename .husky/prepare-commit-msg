#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

commit_msg_file=$1
commit_msg=$(cat "$1")
second_line=$(echo "$commit_msg" | sed -n '2p')
#last_second_line=$(echo "$commit_msg" | tail -n 2 | head -n 1)

if git diff --cached --name-only | grep -q "api"; then
  # api 경로가 포함되어 있으면, 해당 정보를 커밋 메시지에 추가
  commit_msg_title_regex='^(\[API\]\s*)(feat|fix|refactor|chore|test|docs|style): .{1,50}?$'
elif git diff --cached --name-only | grep -q "web"; then
   # web 경로가 포함되어 있으면, 해당 정보를 커밋 메시지에 추가
  commit_msg_title_regex='^(\[WEB\]\s*)(feat|fix|refactor|chore|test|docs|style): .{1,50}?$'
else
  commit_msg_title_regex='^(feat|fix|refactor|chore|test|docs|style): .{1,50}?$'
fi



# 제목
if ! grep -qE "$commit_msg_title_regex" "$commit_msg_file"; then
  echo "COMMIT REJECTED: feat|fix|refactor|chore|test|docs|style: commit 제목 형식에 맞게 작성해주세요"
  exit 1
fi

# 2번째 줄
if ! [ -z "$second_line" ]; then
  echo "COMMIT REJECTED: 제목 아래 개행문자를 추가해주세요."
  exit 1
fi

## 마지막 2번째 줄
#if ! [ -z "$last_second_line" ]; then
#  echo "COMMIT REJECTED: The 2nd last line should be blank."
#  exit 1
#fi

## Jira ticket
#if ! tail -n +1 "$commit_msg_file" | grep -qE '\[[A-Z]+-[0-9]+\]$'; then
#  echo "COMMIT REJECTED: Please check jira ticket."
#  exit 1
#fi
